#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict
    
class BOLAStatic:
    def __init__(self, bitrates, sizes, p, V, gp):
        self.bitrates = bitrates
        self.sizes = sizes
        self.p = p
        self.V = V
        self.gp = gp
        # Calculate M*_BUF_SZ_S from static V and gp 
        # The Puffer and dash.js implementations do the opposite (static min/max buf => dynamic V and gp), 
        # but this is useful to reproduce Fig 1 and 2 (and understand their units...)
        self.MIN_BUF_SZ_S = p * V * (sizes[-2] * (self.utility(-1) + gp) - sizes[-1] * (self.utility(-2) + gp)) / \
                 (sizes[-2] - sizes[-1]) # should be ~12 for paper
        self.MAX_BUF_SZ_S = p * V * (self.utility(0) + gp) # should be ~22 for paper
   
    def utility(self, m):
        return np.log(self.sizes[m] / self.sizes[-1])              

    # Q: number of chunks
    def objective(self, Q, m):
        return (self.V * (self.utility(m) + self.gp) - Q) / (self.sizes[m] * 10 ** 6) # plot S in bits not Mb

    def plot_objective(self, ax):
        Qp = np.linspace(0, 25, num=10)
        
        # Calculate objective values
        for m in range(len(self.bitrates)):
            ax.plot(Qp, self.objective(Qp / self.p, m), label=self.bitrates[m])
        
        ax.axvline(x = self.MIN_BUF_SZ_S, linestyle='dotted', color='gray')
        ax.axvline(x = self.MAX_BUF_SZ_S, linestyle='dotted', color='gray')

        ax.set_ylim(0, 1 * 10 ** -6)
        ax.set_xlabel("Q (sec)")
        ax.set_ylabel("Objective value (S in bits)")
        ax.set_title("V = " + str(self.V) + ", gp = " + str(self.gp) + " (static ladder)")
        ax.legend()
        
    def choose_bitrate(self, Q):
        # For Puffer, full buf check happens in the media server
        full_buf_s = self.p * self.V * (self.utility(0) + self.gp)
        assert(full_buf_s == self.MAX_BUF_SZ_S)
        if Q * self.p > full_buf_s:
            return 0
        objectives = [self.objective(Q, m) for m in range(len(self.bitrates))]
        chosen_idx = objectives.index(max(objectives))
        return self.bitrates[chosen_idx]

    # Check math: recover static V and gp from min/max buf size
    def recover_parameters(self):    
        # code the math 
        min_buf_chunks = self.MIN_BUF_SZ_S / self.p
        max_buf_chunks = self.MAX_BUF_SZ_S / self.p
        size_delta = self.sizes[-2] - self.sizes[-1] 
        
        gp_recovered = (
                max_buf_chunks * ( self.sizes[-2] * self.utility(-1) - self.sizes[-1] * self.utility(-2) ) - 
                    self.utility(0) * min_buf_chunks * size_delta
             ) / (            
                (min_buf_chunks - max_buf_chunks) * size_delta
             )
    
        V_recovered = max_buf_chunks / (self.utility(0) + gp_recovered)
        return (V_recovered, gp_recovered)

    def plot_decision(self, ax):
        Qp = np.linspace(0, 25, num=1000) # approx stepwise
        choices = [self.choose_bitrate(qp / self.p) for qp in Qp]    
        
        ax.axvline(x = self.MIN_BUF_SZ_S, linestyle='dotted', color='gray')
        ax.axvline(x = self.MAX_BUF_SZ_S, linestyle='dotted', color='gray')
        ax.plot(Qp, choices)
        ax.set_xlabel("Q (sec)")
        ax.set_ylabel("Chosen bitrate (Mbps)")  
        ax.set_title("Static V = " + str(self.V) + ", gp = " + str(self.gp) + " (static ladder)")
    
# end BOLAStatic

class BOLADynamic:
    # For the real BOLA, min_buf_s = 3 * 2.002 
    # (chunk duration i.e. 2.002 is technically channel-specific - test only). 
    # Allow other values of min_buf_s for test.  
    def __init__(self, min_buf_s = 3 * 2.002):
        self.min_buf_s = min_buf_s
        
    def plot_objective(self, ax, obj_outfile):        
        # Read objective values from file written by the real BOLA 
        with open(obj_outfile) as f:
            # label => [ [buf samples], [obj samples] ]
            to_plot = defaultdict(lambda: [[], []])
            
            for line in f:
                label, buf, obj = line.split()
                to_plot[label][0].append(float(buf))
                # Obj is calculated wrt bytes, but paper plots wrt bits
                to_plot[label][1].append(float(obj) / 8) 

        # Plot biggest to smallest, to keep colors consistent
        for label, data in sorted(to_plot.items(), reverse=True, key=lambda kv:float(kv[0])):
            # Labels stored as size_t for convenience -- convert back to Mbps
            # TODO: Update for real labels (format string, maybe) 
            ax.plot(data[0], data[1], label=float(label) / 1000)
    
        # Plot min buf (should correspond to intersection of smallest/second-smallest objectives)
        ax.axvline(x = self.min_buf_s, linestyle='dotted', color='gray')
        # Don't plot max buf -- doesn't correspond to anything on plot, 
        # since media server handles decision not to send
        ax.set_ylim(0, 1 * 10 ** -6)
        ax.set_xlabel("Q (sec)")
        ax.set_ylabel("Objective value (S in bits)")     
        ax.set_title("Dynamic ladder")
        ax.legend()

    def plot_decision(self, ax, decision_outfile):
        # Read decisions from file written by the real BOLA 
        with open(decision_outfile) as f:
            bufs = []
            decisions = []
            
            for line in f:
                buf, decision = line.split()
                bufs.append(float(buf))
                # Labels stored as size_t for convenience -- convert back to Mbps
                # TODO: Update for real labels (format string, maybe)
                decisions.append(float(decision) / 1000)
        
        ax.plot(bufs, decisions)                         
        ax.axvline(x = self.min_buf_s, linestyle='dotted', color='gray')

        ax.set_xlabel("Q (sec)")
        ax.set_ylabel("Chosen bitrate (Mbps)")  
        ax.set_title("Dynamic ladder")

# end BOLADynamic
        
def main():
    # 1. Static ladder/V/gp (as in paper): 
    # Recover Fig 1/2, and V/gp from min/max buf 
    # Mbps
    bitrates = [
    6.000,
    2.962,
    1.427,
    0.688,
    0.331]
    
    # Mb
    sizes = [
    18.00,
    8.886,
    4.281,
    2.064,
    0.993]

    static = BOLAStatic(bitrates=bitrates, sizes=sizes, p=3, V=0.93, gp=5)
    V_recovered, gp_recovered = static.recover_parameters()
    print("Recovered V " + str(V_recovered) + ", gp " + str(gp_recovered))
    print("min_buf_s " + str(static.MIN_BUF_SZ_S) + ", max_buf_s " + str(static.MAX_BUF_SZ_S))

    fig, axes = plt.subplots(2, 1)
    fig.tight_layout()
    fig.set_size_inches(8, 7, forward=True)
   
    static.plot_objective(axes[0])
    static.plot_decision(axes[1])
    
    plt.savefig('Fig1_Fig2_recover_V_gp.png')
    axes[0].clear()
    axes[1].clear()
    
    # 2. Read values from files output by test_bola_basic (which uses a static ladder/V/gp, as above)
    # Recover Fig 1/2 (test_bola_basic checks recovering V/gp)
    test_dynamic = BOLADynamic(min_buf_s=static.MIN_BUF_SZ_S)
    test_dynamic.plot_objective(axes[0], 'tmp_fig1_out.txt')
    test_dynamic.plot_decision(axes[1], 'tmp_fig2_out.txt')
    plt.savefig('Fig1_Fig2_test_dynamic.png')
    
if __name__ == "__main__":
    main()